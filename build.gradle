plugins {
	id 'org.springframework.boot' version '2.1.3.RELEASE'
	id 'java'
	id 'com.palantir.docker' version '0.21.0'
}

apply plugin: 'io.spring.dependency-management'

group = 'io.jochimsen'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

static def getDockerTag() {
	def branch = ""
	def proc = "git rev-parse --abbrev-ref HEAD".execute()
	proc.in.eachLine { line -> branch = line }
	proc.err.eachLine { line -> println line }
	proc.waitFor()

	if(branch == "master") {
		branch = "latest"
	}

	branch
}

def dockerOrganization = "soejoc"

task unpack(type: Copy) {
	dependsOn bootJar
	from(zipTree(tasks.bootJar.outputs.files.singleFile))
	into("build/dependency")
	rename { String fileName ->
		fileName.replace("${configurations.springinstrument.singleFile.name}", "spring-instrument.jar")
	}
}

docker {
	name "${dockerOrganization}/${bootJar.baseName}:${getDockerTag()}"
	copySpec.from(tasks.unpack.outputs).into("dependency")
	buildArgs(['DEPENDENCY': "dependency"])
}

configurations {
	springinstrument
}

dependencies {
	implementation('org.springframework.boot:spring-boot-starter-aop')
	implementation('org.springframework.boot:spring-boot-starter-actuator')
	implementation('org.springframework:spring-aspects')
	implementation('org.springframework:spring-tx')
	compileOnly('org.springframework.boot:spring-boot-configuration-processor')
	testImplementation('org.springframework.boot:spring-boot-starter-test')

	implementation project(path: ":cah-protocol")

	// Retrofit
	def retrofit_version = "2.5.0"
	implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
	implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
	implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"

	// Lombok
	def lombok_version = "1.18.4"
	compileOnly "org.projectlombok:lombok:$lombok_version"
	annotationProcessor "org.projectlombok:lombok:$lombok_version"

	runtime('org.springframework:spring-instrument')
	springinstrument "org.springframework:spring-instrument"
	runtime configurations.springinstrument.dependencies
}

test.doFirst {
	jvmArgs = [
			"-noverify",
			"-javaagent:${configurations.springinstrument.asPath}"
	]
}

bootRun {
	jvmArgs = [
			"-noverify",
			"-javaagent:${configurations.springinstrument.asPath}"
	]
}